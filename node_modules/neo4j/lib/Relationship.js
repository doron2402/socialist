/*** Generated by streamline 0.10.1 (callbacks) - DO NOT EDIT ***/
var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch;
(function() {
  var PropertyContainer, Relationship, adjustError, status, util, __hasProp = {
  }.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) {
      if (__hasProp.call(parent, key)) {
        child[key] = parent[key];
      };
    };
    function ctor() {
      this.constructor = child;
    };
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
  };
  status = require("http-status");
  util = require("./util");
  adjustError = util.adjustError;
  PropertyContainer = require("./PropertyContainer");
  module.exports = Relationship = (function(_super) {
    var get, set, _this = this;
    __extends(Relationship, _super);
    function Relationship(db, data, start, end) {
      var Node;
      Relationship.__super__.constructor.call(this, db, data);
      Node = require("./Node");
      this._start = (start || new Node(db, {
        self: data.start
      }));
      this._end = (end || new Node(db, {
        self: data.end
      }));
    };
    get = function(props) {
      var getter, name, _results;
      _results = [];
      for (name in props) {
        getter = props[name];
        _results.push(Relationship.prototype.__defineGetter__(name, getter));
      };
      return _results;
    };
    set = function(props) {
      var name, setter, _results;
      _results = [];
      for (name in props) {
        setter = props[name];
        _results.push(Relationship.prototype.__defineSetter__(name, setter));
      };
      return _results;
    };
    get({
      start: function() {
        return (this._start || null);
      }
    });
    get({
      end: function() {
        return (this._end || null);
      }
    });
    get({
      type: function() {
        return this._data.type;
      }
    });
    Relationship.prototype.toString = function() {
      return (((("relationship @" + this.id) + " (") + this.type) + ")");
    };
    Relationship.prototype.save = function Relationship_prototype_save__1(_) {
      var error, response, __this = this;
      var __frame = {
        name: "Relationship_prototype_save__1",
        line: 78
      };
      return __func(_, this, arguments, Relationship_prototype_save__1, 0, __frame, function __$Relationship_prototype_save__1() {
        return (function ___(__then) {
          (function ___(_) {
            __tryCatch(_, function __$Relationship_prototype_save__1() {
              return __this._request.put({
                uri: (("" + __this.self) + "/properties"),
                json: __this.data
              }, __cb(_, __frame, 4, 12, function ___(__0, __1) {
                response = __1;
                if ((response.statusCode !== status.NO_CONTENT)) {
                  switch (response.statusCode) {
                  case status.BAD_REQUEST:
                    return _(new Error("Invalid data sent"));
                  case status.NOT_FOUND:
                    return _(new Error("Relationship not found"));
                    default:
                    return _(response);
                  };
                }
                ;
                return _(null, __this);
              }, true));
            });
          })(function ___(_error, __result) {
            __catch(function __$Relationship_prototype_save__1() {
              if (_error) {
                error = _error;
                return _(adjustError(error));
              }
               else {
                _(null, __result);
              }
              ;
            });
          });
        })(function ___() {
          __tryCatch(_, _);
        });
      });
    };
    Relationship.prototype.index = function Relationship_prototype_index__2(index, key, value, _) {
      var error, response, services, __this = this;
      var __frame = {
        name: "Relationship_prototype_index__2",
        line: 111
      };
      return __func(_, this, arguments, Relationship_prototype_index__2, 3, __frame, function __$Relationship_prototype_index__2() {
        return (function ___(__then) {
          (function ___(_) {
            __tryCatch(_, function __$Relationship_prototype_index__2() {
              if (!__this.exists) {
                return _(new Error("Relationship must exist before indexing properties"));
              }
              ;
              return __this.db.getServices(__cb(_, __frame, 5, 23, function ___(__0, __1) {
                services = __1;
                return __this._request.post({
                  url: ((("" + services.relationship_index) + "/") + index),
                  json: {
                    key: key,
                    value: value,
                    uri: __this.self
                  }
                }, __cb(_, __frame, 7, 12, function ___(__0, __2) {
                  response = __2;
                  if ((response.statusCode !== status.CREATED)) {
                    return _(response);
                  }
                  ;
                  __then();
                }, true));
              }, true));
            });
          })(function ___(_error, __result) {
            __catch(function __$Relationship_prototype_index__2() {
              if (_error) {
                error = _error;
                return _(adjustError(error));
              }
               else {
                _(null, __result);
              }
              ;
            });
          });
        })(function ___() {
          __tryCatch(_, _);
        });
      });
    };
    Relationship.prototype.unindex = function Relationship_prototype_unindex__3(index, key, value, _) {
      var base, error, response, services, url, __this = this;
      var __frame = {
        name: "Relationship_prototype_unindex__3",
        line: 145
      };
      return __func(_, this, arguments, Relationship_prototype_unindex__3, 3, __frame, function __$Relationship_prototype_unindex__3() {
        return (function ___(__then) {
          (function ___(_) {
            __tryCatch(_, function __$Relationship_prototype_unindex__3() {
              if (!__this.exists) {
                return _(new Error("Relationship must exist before unindexing."));
              }
              ;
              return __this.db.getServices(__cb(_, __frame, 7, 23, function ___(__0, __1) {
                services = __1;
                if (key) {
                  key = encodeURIComponent(key);
                }
                ;
                if (value) {
                  value = encodeURIComponent(value);
                }
                ;
                base = ((("" + services.relationship_index) + "/") + (encodeURIComponent(index)));
                url = ((key && value) ? ((((((("" + base) + "/") + key) + "/") + value) + "/") + __this.id) : (key ? ((((("" + base) + "/") + key) + "/") + __this.id) : ((("" + base) + "/") + __this.id)));
                return __this._request.del(url, __cb(_, __frame, 20, 12, function ___(__0, __2) {
                  response = __2;
                  if ((response.statusCode !== status.NO_CONTENT)) {
                    return _(response);
                  }
                  ;
                  __then();
                }, true));
              }, true));
            });
          })(function ___(_error, __result) {
            __catch(function __$Relationship_prototype_unindex__3() {
              if (_error) {
                error = _error;
                return _(adjustError(error));
              }
               else {
                _(null, __result);
              }
              ;
            });
          });
        })(function ___() {
          __tryCatch(_, _);
        });
      });
    };
    (function(actual) {
      return Relationship.prototype.unindex = function(index, key, value, callback) {
        if ((typeof key === "function")) {
          callback = key;
          key = null;
          value = null;
        }
         else if ((typeof value === "function")) {
          callback = value;
          value = null;
        }
        
        ;
        return actual.call(this, index, key, value, callback);
      };
    })(Relationship.prototype.unindex);
    return Relationship;
  }).call(this, PropertyContainer);
}).call(this);
//# sourceMappingURL=Relationship.map
