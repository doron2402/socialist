/*** Generated by streamline 0.10.1 (callbacks) - DO NOT EDIT ***/
var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch;
(function() {
  var PropertyContainer, adjustError, status, util;
  status = require("http-status");
  util = require("./util");
  adjustError = util.adjustError;
  module.exports = PropertyContainer = (function() {
    var get, set, _this = this;
    function PropertyContainer(db, data) {
      this.db = db;
      this._request = db._request;
      this._data = (data || {
      });
      this._data.self = ((((data != null) ? data.self : void 0)) || null);
    };
    get = function(props) {
      var getter, name, _results;
      _results = [];
      for (name in props) {
        getter = props[name];
        _results.push(PropertyContainer.prototype.__defineGetter__(name, getter));
      };
      return _results;
    };
    set = function(props) {
      var name, setter, _results;
      _results = [];
      for (name in props) {
        setter = props[name];
        _results.push(PropertyContainer.prototype.__defineSetter__(name, setter));
      };
      return _results;
    };
    get({
      self: function() {
        return (this._data.self || null);
      }
    });
    get({
      exists: function() {
        return (this.self != null);
      }
    });
    get({
      id: function() {
        var match;
        if (!this.exists) {
          return null;
        }
         else {
          match = /(?:node|relationship)\/(\d+)$/.exec(this.self);
          return parseInt(match[1]);
        }
        ;
      }
    });
    get({
      data: function() {
        return (this._data.data || null);
      }
    });
    set({
      data: function(value) {
        return this._data.data = value;
      }
    });
    PropertyContainer.prototype.equals = function(other) {
      return (this.self === (((other != null) ? other.self : void 0)));
    };
    PropertyContainer.prototype["delete"] = function PropertyContainer_prototype_delete__1(_) {
      var error, response, __this = this;
      var __frame = {
        name: "PropertyContainer_prototype_delete__1",
        line: 86
      };
      return __func(_, this, arguments, PropertyContainer_prototype_delete__1, 0, __frame, function __$PropertyContainer_prototype_delete__1() {
        if (!__this.exists) {
          return _(null);
        }
        ;
        return (function ___(__then) {
          (function ___(_) {
            __tryCatch(_, function __$PropertyContainer_prototype_delete__1() {
              return __this._request.del(__this.self, __cb(_, __frame, 5, 12, function ___(__0, __1) {
                response = __1;
                if ((response.statusCode !== status.NO_CONTENT)) {
                  switch (response.statusCode) {
                  case status.NOT_FOUND:
                    return _(new Error("PropertyContainer not found"));
                  case status.CONFLICT:
                    return _(new Error("Node could not be deleted (still has relationships?)"));
                    default:
                    return _(response);
                  };
                }
                ;
                __this._data.self = null;
                __then();
              }, true));
            });
          })(function ___(_error, __result) {
            __catch(function __$PropertyContainer_prototype_delete__1() {
              if (_error) {
                error = _error;
                return _(adjustError(error));
              }
               else {
                _(null, __result);
              }
              ;
            });
          });
        })(function ___() {
          __tryCatch(_, _);
        });
      });
    };
    PropertyContainer.prototype.del = function() {
      return this["delete"].apply(this, arguments);
    };
    PropertyContainer.prototype.toJSON = function() {
      var json;
      json = this.db._toJSON(this);
      json._data = this._data;
      return json;
    };
    PropertyContainer._fromJSON = function(db, obj) {
      var _data;
      _data = obj._data;
      return new this(db, _data);
    };
    return PropertyContainer;
  }).call(this);
}).call(this);
//# sourceMappingURL=PropertyContainer.map
